// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: protos/access.proto

package booking

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AccessService_CreateAccessPersonal_FullMethodName = "/gym.AccessService/CreateAccessPersonal"
	AccessService_ListAccessPersonal_FullMethodName   = "/gym.AccessService/ListAccessPersonal"
	AccessService_CreateAccessGroup_FullMethodName    = "/gym.AccessService/CreateAccessGroup"
	AccessService_ListAccessGroup_FullMethodName      = "/gym.AccessService/ListAccessGroup"
	AccessService_CreateAccessCoach_FullMethodName    = "/gym.AccessService/CreateAccessCoach"
	AccessService_ListAccessCoach_FullMethodName      = "/gym.AccessService/ListAccessCoach"
)

// AccessServiceClient is the client API for AccessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessServiceClient interface {
	CreateAccessPersonal(ctx context.Context, in *CreateAccessPersonalRequest, opts ...grpc.CallOption) (*AccessPersonal, error)
	ListAccessPersonal(ctx context.Context, in *ListAccessPersonalRequest, opts ...grpc.CallOption) (*ListAccessPersonalResponse, error)
	CreateAccessGroup(ctx context.Context, in *CreateAccessGroupRequest, opts ...grpc.CallOption) (*AccessGroup, error)
	ListAccessGroup(ctx context.Context, in *ListAccessGroupRequest, opts ...grpc.CallOption) (*ListAccessGroupResponse, error)
	CreateAccessCoach(ctx context.Context, in *CreateAccessCoachRequest, opts ...grpc.CallOption) (*AccessCoach, error)
	ListAccessCoach(ctx context.Context, in *ListAccessCoachRequest, opts ...grpc.CallOption) (*ListAccessCoachResponse, error)
}

type accessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessServiceClient(cc grpc.ClientConnInterface) AccessServiceClient {
	return &accessServiceClient{cc}
}

func (c *accessServiceClient) CreateAccessPersonal(ctx context.Context, in *CreateAccessPersonalRequest, opts ...grpc.CallOption) (*AccessPersonal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessPersonal)
	err := c.cc.Invoke(ctx, AccessService_CreateAccessPersonal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessServiceClient) ListAccessPersonal(ctx context.Context, in *ListAccessPersonalRequest, opts ...grpc.CallOption) (*ListAccessPersonalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccessPersonalResponse)
	err := c.cc.Invoke(ctx, AccessService_ListAccessPersonal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessServiceClient) CreateAccessGroup(ctx context.Context, in *CreateAccessGroupRequest, opts ...grpc.CallOption) (*AccessGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessGroup)
	err := c.cc.Invoke(ctx, AccessService_CreateAccessGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessServiceClient) ListAccessGroup(ctx context.Context, in *ListAccessGroupRequest, opts ...grpc.CallOption) (*ListAccessGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccessGroupResponse)
	err := c.cc.Invoke(ctx, AccessService_ListAccessGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessServiceClient) CreateAccessCoach(ctx context.Context, in *CreateAccessCoachRequest, opts ...grpc.CallOption) (*AccessCoach, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessCoach)
	err := c.cc.Invoke(ctx, AccessService_CreateAccessCoach_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessServiceClient) ListAccessCoach(ctx context.Context, in *ListAccessCoachRequest, opts ...grpc.CallOption) (*ListAccessCoachResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccessCoachResponse)
	err := c.cc.Invoke(ctx, AccessService_ListAccessCoach_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessServiceServer is the server API for AccessService service.
// All implementations must embed UnimplementedAccessServiceServer
// for forward compatibility.
type AccessServiceServer interface {
	CreateAccessPersonal(context.Context, *CreateAccessPersonalRequest) (*AccessPersonal, error)
	ListAccessPersonal(context.Context, *ListAccessPersonalRequest) (*ListAccessPersonalResponse, error)
	CreateAccessGroup(context.Context, *CreateAccessGroupRequest) (*AccessGroup, error)
	ListAccessGroup(context.Context, *ListAccessGroupRequest) (*ListAccessGroupResponse, error)
	CreateAccessCoach(context.Context, *CreateAccessCoachRequest) (*AccessCoach, error)
	ListAccessCoach(context.Context, *ListAccessCoachRequest) (*ListAccessCoachResponse, error)
	mustEmbedUnimplementedAccessServiceServer()
}

// UnimplementedAccessServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAccessServiceServer struct{}

func (UnimplementedAccessServiceServer) CreateAccessPersonal(context.Context, *CreateAccessPersonalRequest) (*AccessPersonal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccessPersonal not implemented")
}
func (UnimplementedAccessServiceServer) ListAccessPersonal(context.Context, *ListAccessPersonalRequest) (*ListAccessPersonalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessPersonal not implemented")
}
func (UnimplementedAccessServiceServer) CreateAccessGroup(context.Context, *CreateAccessGroupRequest) (*AccessGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccessGroup not implemented")
}
func (UnimplementedAccessServiceServer) ListAccessGroup(context.Context, *ListAccessGroupRequest) (*ListAccessGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessGroup not implemented")
}
func (UnimplementedAccessServiceServer) CreateAccessCoach(context.Context, *CreateAccessCoachRequest) (*AccessCoach, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccessCoach not implemented")
}
func (UnimplementedAccessServiceServer) ListAccessCoach(context.Context, *ListAccessCoachRequest) (*ListAccessCoachResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccessCoach not implemented")
}
func (UnimplementedAccessServiceServer) mustEmbedUnimplementedAccessServiceServer() {}
func (UnimplementedAccessServiceServer) testEmbeddedByValue()                       {}

// UnsafeAccessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessServiceServer will
// result in compilation errors.
type UnsafeAccessServiceServer interface {
	mustEmbedUnimplementedAccessServiceServer()
}

func RegisterAccessServiceServer(s grpc.ServiceRegistrar, srv AccessServiceServer) {
	// If the following call pancis, it indicates UnimplementedAccessServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AccessService_ServiceDesc, srv)
}

func _AccessService_CreateAccessPersonal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccessPersonalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServiceServer).CreateAccessPersonal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessService_CreateAccessPersonal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServiceServer).CreateAccessPersonal(ctx, req.(*CreateAccessPersonalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessService_ListAccessPersonal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessPersonalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServiceServer).ListAccessPersonal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessService_ListAccessPersonal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServiceServer).ListAccessPersonal(ctx, req.(*ListAccessPersonalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessService_CreateAccessGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccessGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServiceServer).CreateAccessGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessService_CreateAccessGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServiceServer).CreateAccessGroup(ctx, req.(*CreateAccessGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessService_ListAccessGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServiceServer).ListAccessGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessService_ListAccessGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServiceServer).ListAccessGroup(ctx, req.(*ListAccessGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessService_CreateAccessCoach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccessCoachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServiceServer).CreateAccessCoach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessService_CreateAccessCoach_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServiceServer).CreateAccessCoach(ctx, req.(*CreateAccessCoachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessService_ListAccessCoach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessCoachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessServiceServer).ListAccessCoach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessService_ListAccessCoach_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessServiceServer).ListAccessCoach(ctx, req.(*ListAccessCoachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessService_ServiceDesc is the grpc.ServiceDesc for AccessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gym.AccessService",
	HandlerType: (*AccessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccessPersonal",
			Handler:    _AccessService_CreateAccessPersonal_Handler,
		},
		{
			MethodName: "ListAccessPersonal",
			Handler:    _AccessService_ListAccessPersonal_Handler,
		},
		{
			MethodName: "CreateAccessGroup",
			Handler:    _AccessService_CreateAccessGroup_Handler,
		},
		{
			MethodName: "ListAccessGroup",
			Handler:    _AccessService_ListAccessGroup_Handler,
		},
		{
			MethodName: "CreateAccessCoach",
			Handler:    _AccessService_CreateAccessCoach_Handler,
		},
		{
			MethodName: "ListAccessCoach",
			Handler:    _AccessService_ListAccessCoach_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/access.proto",
}
