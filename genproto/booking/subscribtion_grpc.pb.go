// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: protos/subscribtion.proto

package booking

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SubscriptionPersonalService_CreateSubscriptionPersonal_FullMethodName = "/gym.SubscriptionPersonalService/CreateSubscriptionPersonal"
	SubscriptionPersonalService_GetSubscriptionPersonal_FullMethodName    = "/gym.SubscriptionPersonalService/GetSubscriptionPersonal"
	SubscriptionPersonalService_UpdateSubscriptionPersonal_FullMethodName = "/gym.SubscriptionPersonalService/UpdateSubscriptionPersonal"
	SubscriptionPersonalService_DeleteSubscriptionPersonal_FullMethodName = "/gym.SubscriptionPersonalService/DeleteSubscriptionPersonal"
	SubscriptionPersonalService_ListSubscriptionPersonal_FullMethodName   = "/gym.SubscriptionPersonalService/ListSubscriptionPersonal"
)

// SubscriptionPersonalServiceClient is the client API for SubscriptionPersonalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionPersonalServiceClient interface {
	CreateSubscriptionPersonal(ctx context.Context, in *CreateSubscriptionPersonalRequest, opts ...grpc.CallOption) (*SubscriptionPersonal, error)
	GetSubscriptionPersonal(ctx context.Context, in *GetSubscriptionPersonalRequest, opts ...grpc.CallOption) (*SubscriptionPersonal, error)
	UpdateSubscriptionPersonal(ctx context.Context, in *UpdateSubscriptionPersonalRequest, opts ...grpc.CallOption) (*SubscriptionPersonal, error)
	DeleteSubscriptionPersonal(ctx context.Context, in *DeleteSubscriptionPersonalRequest, opts ...grpc.CallOption) (*Empty, error)
	ListSubscriptionPersonal(ctx context.Context, in *ListSubscriptionPersonalRequest, opts ...grpc.CallOption) (*ListSubscriptionPersonalResponse, error)
}

type subscriptionPersonalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionPersonalServiceClient(cc grpc.ClientConnInterface) SubscriptionPersonalServiceClient {
	return &subscriptionPersonalServiceClient{cc}
}

func (c *subscriptionPersonalServiceClient) CreateSubscriptionPersonal(ctx context.Context, in *CreateSubscriptionPersonalRequest, opts ...grpc.CallOption) (*SubscriptionPersonal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionPersonal)
	err := c.cc.Invoke(ctx, SubscriptionPersonalService_CreateSubscriptionPersonal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionPersonalServiceClient) GetSubscriptionPersonal(ctx context.Context, in *GetSubscriptionPersonalRequest, opts ...grpc.CallOption) (*SubscriptionPersonal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionPersonal)
	err := c.cc.Invoke(ctx, SubscriptionPersonalService_GetSubscriptionPersonal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionPersonalServiceClient) UpdateSubscriptionPersonal(ctx context.Context, in *UpdateSubscriptionPersonalRequest, opts ...grpc.CallOption) (*SubscriptionPersonal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionPersonal)
	err := c.cc.Invoke(ctx, SubscriptionPersonalService_UpdateSubscriptionPersonal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionPersonalServiceClient) DeleteSubscriptionPersonal(ctx context.Context, in *DeleteSubscriptionPersonalRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, SubscriptionPersonalService_DeleteSubscriptionPersonal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionPersonalServiceClient) ListSubscriptionPersonal(ctx context.Context, in *ListSubscriptionPersonalRequest, opts ...grpc.CallOption) (*ListSubscriptionPersonalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSubscriptionPersonalResponse)
	err := c.cc.Invoke(ctx, SubscriptionPersonalService_ListSubscriptionPersonal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionPersonalServiceServer is the server API for SubscriptionPersonalService service.
// All implementations must embed UnimplementedSubscriptionPersonalServiceServer
// for forward compatibility.
type SubscriptionPersonalServiceServer interface {
	CreateSubscriptionPersonal(context.Context, *CreateSubscriptionPersonalRequest) (*SubscriptionPersonal, error)
	GetSubscriptionPersonal(context.Context, *GetSubscriptionPersonalRequest) (*SubscriptionPersonal, error)
	UpdateSubscriptionPersonal(context.Context, *UpdateSubscriptionPersonalRequest) (*SubscriptionPersonal, error)
	DeleteSubscriptionPersonal(context.Context, *DeleteSubscriptionPersonalRequest) (*Empty, error)
	ListSubscriptionPersonal(context.Context, *ListSubscriptionPersonalRequest) (*ListSubscriptionPersonalResponse, error)
	mustEmbedUnimplementedSubscriptionPersonalServiceServer()
}

// UnimplementedSubscriptionPersonalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubscriptionPersonalServiceServer struct{}

func (UnimplementedSubscriptionPersonalServiceServer) CreateSubscriptionPersonal(context.Context, *CreateSubscriptionPersonalRequest) (*SubscriptionPersonal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscriptionPersonal not implemented")
}
func (UnimplementedSubscriptionPersonalServiceServer) GetSubscriptionPersonal(context.Context, *GetSubscriptionPersonalRequest) (*SubscriptionPersonal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionPersonal not implemented")
}
func (UnimplementedSubscriptionPersonalServiceServer) UpdateSubscriptionPersonal(context.Context, *UpdateSubscriptionPersonalRequest) (*SubscriptionPersonal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscriptionPersonal not implemented")
}
func (UnimplementedSubscriptionPersonalServiceServer) DeleteSubscriptionPersonal(context.Context, *DeleteSubscriptionPersonalRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscriptionPersonal not implemented")
}
func (UnimplementedSubscriptionPersonalServiceServer) ListSubscriptionPersonal(context.Context, *ListSubscriptionPersonalRequest) (*ListSubscriptionPersonalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptionPersonal not implemented")
}
func (UnimplementedSubscriptionPersonalServiceServer) mustEmbedUnimplementedSubscriptionPersonalServiceServer() {
}
func (UnimplementedSubscriptionPersonalServiceServer) testEmbeddedByValue() {}

// UnsafeSubscriptionPersonalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionPersonalServiceServer will
// result in compilation errors.
type UnsafeSubscriptionPersonalServiceServer interface {
	mustEmbedUnimplementedSubscriptionPersonalServiceServer()
}

func RegisterSubscriptionPersonalServiceServer(s grpc.ServiceRegistrar, srv SubscriptionPersonalServiceServer) {
	// If the following call pancis, it indicates UnimplementedSubscriptionPersonalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SubscriptionPersonalService_ServiceDesc, srv)
}

func _SubscriptionPersonalService_CreateSubscriptionPersonal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubscriptionPersonalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionPersonalServiceServer).CreateSubscriptionPersonal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionPersonalService_CreateSubscriptionPersonal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionPersonalServiceServer).CreateSubscriptionPersonal(ctx, req.(*CreateSubscriptionPersonalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionPersonalService_GetSubscriptionPersonal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionPersonalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionPersonalServiceServer).GetSubscriptionPersonal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionPersonalService_GetSubscriptionPersonal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionPersonalServiceServer).GetSubscriptionPersonal(ctx, req.(*GetSubscriptionPersonalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionPersonalService_UpdateSubscriptionPersonal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubscriptionPersonalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionPersonalServiceServer).UpdateSubscriptionPersonal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionPersonalService_UpdateSubscriptionPersonal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionPersonalServiceServer).UpdateSubscriptionPersonal(ctx, req.(*UpdateSubscriptionPersonalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionPersonalService_DeleteSubscriptionPersonal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubscriptionPersonalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionPersonalServiceServer).DeleteSubscriptionPersonal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionPersonalService_DeleteSubscriptionPersonal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionPersonalServiceServer).DeleteSubscriptionPersonal(ctx, req.(*DeleteSubscriptionPersonalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionPersonalService_ListSubscriptionPersonal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscriptionPersonalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionPersonalServiceServer).ListSubscriptionPersonal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionPersonalService_ListSubscriptionPersonal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionPersonalServiceServer).ListSubscriptionPersonal(ctx, req.(*ListSubscriptionPersonalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriptionPersonalService_ServiceDesc is the grpc.ServiceDesc for SubscriptionPersonalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionPersonalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gym.SubscriptionPersonalService",
	HandlerType: (*SubscriptionPersonalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubscriptionPersonal",
			Handler:    _SubscriptionPersonalService_CreateSubscriptionPersonal_Handler,
		},
		{
			MethodName: "GetSubscriptionPersonal",
			Handler:    _SubscriptionPersonalService_GetSubscriptionPersonal_Handler,
		},
		{
			MethodName: "UpdateSubscriptionPersonal",
			Handler:    _SubscriptionPersonalService_UpdateSubscriptionPersonal_Handler,
		},
		{
			MethodName: "DeleteSubscriptionPersonal",
			Handler:    _SubscriptionPersonalService_DeleteSubscriptionPersonal_Handler,
		},
		{
			MethodName: "ListSubscriptionPersonal",
			Handler:    _SubscriptionPersonalService_ListSubscriptionPersonal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/subscribtion.proto",
}

const (
	SubscriptionGroupService_CreateSubscriptionGroup_FullMethodName = "/gym.SubscriptionGroupService/CreateSubscriptionGroup"
	SubscriptionGroupService_GetSubscriptionGroup_FullMethodName    = "/gym.SubscriptionGroupService/GetSubscriptionGroup"
	SubscriptionGroupService_UpdateSubscriptionGroup_FullMethodName = "/gym.SubscriptionGroupService/UpdateSubscriptionGroup"
	SubscriptionGroupService_DeleteSubscriptionGroup_FullMethodName = "/gym.SubscriptionGroupService/DeleteSubscriptionGroup"
	SubscriptionGroupService_ListSubscriptionGroup_FullMethodName   = "/gym.SubscriptionGroupService/ListSubscriptionGroup"
)

// SubscriptionGroupServiceClient is the client API for SubscriptionGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionGroupServiceClient interface {
	CreateSubscriptionGroup(ctx context.Context, in *CreateSubscriptionGroupRequest, opts ...grpc.CallOption) (*SubscriptionGroup, error)
	GetSubscriptionGroup(ctx context.Context, in *GetSubscriptionGroupRequest, opts ...grpc.CallOption) (*SubscriptionGroup, error)
	UpdateSubscriptionGroup(ctx context.Context, in *UpdateSubscriptionGroupRequest, opts ...grpc.CallOption) (*SubscriptionGroup, error)
	DeleteSubscriptionGroup(ctx context.Context, in *DeleteSubscriptionGroupRequest, opts ...grpc.CallOption) (*Empty, error)
	ListSubscriptionGroup(ctx context.Context, in *ListSubscriptionGroupRequest, opts ...grpc.CallOption) (*ListSubscriptionGroupResponse, error)
}

type subscriptionGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionGroupServiceClient(cc grpc.ClientConnInterface) SubscriptionGroupServiceClient {
	return &subscriptionGroupServiceClient{cc}
}

func (c *subscriptionGroupServiceClient) CreateSubscriptionGroup(ctx context.Context, in *CreateSubscriptionGroupRequest, opts ...grpc.CallOption) (*SubscriptionGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionGroup)
	err := c.cc.Invoke(ctx, SubscriptionGroupService_CreateSubscriptionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionGroupServiceClient) GetSubscriptionGroup(ctx context.Context, in *GetSubscriptionGroupRequest, opts ...grpc.CallOption) (*SubscriptionGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionGroup)
	err := c.cc.Invoke(ctx, SubscriptionGroupService_GetSubscriptionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionGroupServiceClient) UpdateSubscriptionGroup(ctx context.Context, in *UpdateSubscriptionGroupRequest, opts ...grpc.CallOption) (*SubscriptionGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionGroup)
	err := c.cc.Invoke(ctx, SubscriptionGroupService_UpdateSubscriptionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionGroupServiceClient) DeleteSubscriptionGroup(ctx context.Context, in *DeleteSubscriptionGroupRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, SubscriptionGroupService_DeleteSubscriptionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionGroupServiceClient) ListSubscriptionGroup(ctx context.Context, in *ListSubscriptionGroupRequest, opts ...grpc.CallOption) (*ListSubscriptionGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSubscriptionGroupResponse)
	err := c.cc.Invoke(ctx, SubscriptionGroupService_ListSubscriptionGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionGroupServiceServer is the server API for SubscriptionGroupService service.
// All implementations must embed UnimplementedSubscriptionGroupServiceServer
// for forward compatibility.
type SubscriptionGroupServiceServer interface {
	CreateSubscriptionGroup(context.Context, *CreateSubscriptionGroupRequest) (*SubscriptionGroup, error)
	GetSubscriptionGroup(context.Context, *GetSubscriptionGroupRequest) (*SubscriptionGroup, error)
	UpdateSubscriptionGroup(context.Context, *UpdateSubscriptionGroupRequest) (*SubscriptionGroup, error)
	DeleteSubscriptionGroup(context.Context, *DeleteSubscriptionGroupRequest) (*Empty, error)
	ListSubscriptionGroup(context.Context, *ListSubscriptionGroupRequest) (*ListSubscriptionGroupResponse, error)
	mustEmbedUnimplementedSubscriptionGroupServiceServer()
}

// UnimplementedSubscriptionGroupServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubscriptionGroupServiceServer struct{}

func (UnimplementedSubscriptionGroupServiceServer) CreateSubscriptionGroup(context.Context, *CreateSubscriptionGroupRequest) (*SubscriptionGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscriptionGroup not implemented")
}
func (UnimplementedSubscriptionGroupServiceServer) GetSubscriptionGroup(context.Context, *GetSubscriptionGroupRequest) (*SubscriptionGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionGroup not implemented")
}
func (UnimplementedSubscriptionGroupServiceServer) UpdateSubscriptionGroup(context.Context, *UpdateSubscriptionGroupRequest) (*SubscriptionGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscriptionGroup not implemented")
}
func (UnimplementedSubscriptionGroupServiceServer) DeleteSubscriptionGroup(context.Context, *DeleteSubscriptionGroupRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscriptionGroup not implemented")
}
func (UnimplementedSubscriptionGroupServiceServer) ListSubscriptionGroup(context.Context, *ListSubscriptionGroupRequest) (*ListSubscriptionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptionGroup not implemented")
}
func (UnimplementedSubscriptionGroupServiceServer) mustEmbedUnimplementedSubscriptionGroupServiceServer() {
}
func (UnimplementedSubscriptionGroupServiceServer) testEmbeddedByValue() {}

// UnsafeSubscriptionGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionGroupServiceServer will
// result in compilation errors.
type UnsafeSubscriptionGroupServiceServer interface {
	mustEmbedUnimplementedSubscriptionGroupServiceServer()
}

func RegisterSubscriptionGroupServiceServer(s grpc.ServiceRegistrar, srv SubscriptionGroupServiceServer) {
	// If the following call pancis, it indicates UnimplementedSubscriptionGroupServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SubscriptionGroupService_ServiceDesc, srv)
}

func _SubscriptionGroupService_CreateSubscriptionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubscriptionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionGroupServiceServer).CreateSubscriptionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionGroupService_CreateSubscriptionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionGroupServiceServer).CreateSubscriptionGroup(ctx, req.(*CreateSubscriptionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionGroupService_GetSubscriptionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionGroupServiceServer).GetSubscriptionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionGroupService_GetSubscriptionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionGroupServiceServer).GetSubscriptionGroup(ctx, req.(*GetSubscriptionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionGroupService_UpdateSubscriptionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubscriptionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionGroupServiceServer).UpdateSubscriptionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionGroupService_UpdateSubscriptionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionGroupServiceServer).UpdateSubscriptionGroup(ctx, req.(*UpdateSubscriptionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionGroupService_DeleteSubscriptionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubscriptionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionGroupServiceServer).DeleteSubscriptionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionGroupService_DeleteSubscriptionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionGroupServiceServer).DeleteSubscriptionGroup(ctx, req.(*DeleteSubscriptionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionGroupService_ListSubscriptionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscriptionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionGroupServiceServer).ListSubscriptionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionGroupService_ListSubscriptionGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionGroupServiceServer).ListSubscriptionGroup(ctx, req.(*ListSubscriptionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriptionGroupService_ServiceDesc is the grpc.ServiceDesc for SubscriptionGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gym.SubscriptionGroupService",
	HandlerType: (*SubscriptionGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubscriptionGroup",
			Handler:    _SubscriptionGroupService_CreateSubscriptionGroup_Handler,
		},
		{
			MethodName: "GetSubscriptionGroup",
			Handler:    _SubscriptionGroupService_GetSubscriptionGroup_Handler,
		},
		{
			MethodName: "UpdateSubscriptionGroup",
			Handler:    _SubscriptionGroupService_UpdateSubscriptionGroup_Handler,
		},
		{
			MethodName: "DeleteSubscriptionGroup",
			Handler:    _SubscriptionGroupService_DeleteSubscriptionGroup_Handler,
		},
		{
			MethodName: "ListSubscriptionGroup",
			Handler:    _SubscriptionGroupService_ListSubscriptionGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/subscribtion.proto",
}

const (
	SubscriptionCoachService_CreateSubscriptionCoach_FullMethodName = "/gym.SubscriptionCoachService/CreateSubscriptionCoach"
	SubscriptionCoachService_GetSubscriptionCoach_FullMethodName    = "/gym.SubscriptionCoachService/GetSubscriptionCoach"
	SubscriptionCoachService_UpdateSubscriptionCoach_FullMethodName = "/gym.SubscriptionCoachService/UpdateSubscriptionCoach"
	SubscriptionCoachService_DeleteSubscriptionCoach_FullMethodName = "/gym.SubscriptionCoachService/DeleteSubscriptionCoach"
	SubscriptionCoachService_ListSubscriptionCoach_FullMethodName   = "/gym.SubscriptionCoachService/ListSubscriptionCoach"
)

// SubscriptionCoachServiceClient is the client API for SubscriptionCoachService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionCoachServiceClient interface {
	CreateSubscriptionCoach(ctx context.Context, in *CreateSubscriptionCoachRequest, opts ...grpc.CallOption) (*SubscriptionCoach, error)
	GetSubscriptionCoach(ctx context.Context, in *GetSubscriptionCoachRequest, opts ...grpc.CallOption) (*SubscriptionCoach, error)
	UpdateSubscriptionCoach(ctx context.Context, in *UpdateSubscriptionCoachRequest, opts ...grpc.CallOption) (*SubscriptionCoach, error)
	DeleteSubscriptionCoach(ctx context.Context, in *DeleteSubscriptionCoachRequest, opts ...grpc.CallOption) (*Empty, error)
	ListSubscriptionCoach(ctx context.Context, in *ListSubscriptionCoachRequest, opts ...grpc.CallOption) (*ListSubscriptionCoachResponse, error)
}

type subscriptionCoachServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionCoachServiceClient(cc grpc.ClientConnInterface) SubscriptionCoachServiceClient {
	return &subscriptionCoachServiceClient{cc}
}

func (c *subscriptionCoachServiceClient) CreateSubscriptionCoach(ctx context.Context, in *CreateSubscriptionCoachRequest, opts ...grpc.CallOption) (*SubscriptionCoach, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionCoach)
	err := c.cc.Invoke(ctx, SubscriptionCoachService_CreateSubscriptionCoach_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionCoachServiceClient) GetSubscriptionCoach(ctx context.Context, in *GetSubscriptionCoachRequest, opts ...grpc.CallOption) (*SubscriptionCoach, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionCoach)
	err := c.cc.Invoke(ctx, SubscriptionCoachService_GetSubscriptionCoach_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionCoachServiceClient) UpdateSubscriptionCoach(ctx context.Context, in *UpdateSubscriptionCoachRequest, opts ...grpc.CallOption) (*SubscriptionCoach, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionCoach)
	err := c.cc.Invoke(ctx, SubscriptionCoachService_UpdateSubscriptionCoach_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionCoachServiceClient) DeleteSubscriptionCoach(ctx context.Context, in *DeleteSubscriptionCoachRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, SubscriptionCoachService_DeleteSubscriptionCoach_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionCoachServiceClient) ListSubscriptionCoach(ctx context.Context, in *ListSubscriptionCoachRequest, opts ...grpc.CallOption) (*ListSubscriptionCoachResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSubscriptionCoachResponse)
	err := c.cc.Invoke(ctx, SubscriptionCoachService_ListSubscriptionCoach_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionCoachServiceServer is the server API for SubscriptionCoachService service.
// All implementations must embed UnimplementedSubscriptionCoachServiceServer
// for forward compatibility.
type SubscriptionCoachServiceServer interface {
	CreateSubscriptionCoach(context.Context, *CreateSubscriptionCoachRequest) (*SubscriptionCoach, error)
	GetSubscriptionCoach(context.Context, *GetSubscriptionCoachRequest) (*SubscriptionCoach, error)
	UpdateSubscriptionCoach(context.Context, *UpdateSubscriptionCoachRequest) (*SubscriptionCoach, error)
	DeleteSubscriptionCoach(context.Context, *DeleteSubscriptionCoachRequest) (*Empty, error)
	ListSubscriptionCoach(context.Context, *ListSubscriptionCoachRequest) (*ListSubscriptionCoachResponse, error)
	mustEmbedUnimplementedSubscriptionCoachServiceServer()
}

// UnimplementedSubscriptionCoachServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSubscriptionCoachServiceServer struct{}

func (UnimplementedSubscriptionCoachServiceServer) CreateSubscriptionCoach(context.Context, *CreateSubscriptionCoachRequest) (*SubscriptionCoach, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscriptionCoach not implemented")
}
func (UnimplementedSubscriptionCoachServiceServer) GetSubscriptionCoach(context.Context, *GetSubscriptionCoachRequest) (*SubscriptionCoach, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionCoach not implemented")
}
func (UnimplementedSubscriptionCoachServiceServer) UpdateSubscriptionCoach(context.Context, *UpdateSubscriptionCoachRequest) (*SubscriptionCoach, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscriptionCoach not implemented")
}
func (UnimplementedSubscriptionCoachServiceServer) DeleteSubscriptionCoach(context.Context, *DeleteSubscriptionCoachRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscriptionCoach not implemented")
}
func (UnimplementedSubscriptionCoachServiceServer) ListSubscriptionCoach(context.Context, *ListSubscriptionCoachRequest) (*ListSubscriptionCoachResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptionCoach not implemented")
}
func (UnimplementedSubscriptionCoachServiceServer) mustEmbedUnimplementedSubscriptionCoachServiceServer() {
}
func (UnimplementedSubscriptionCoachServiceServer) testEmbeddedByValue() {}

// UnsafeSubscriptionCoachServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionCoachServiceServer will
// result in compilation errors.
type UnsafeSubscriptionCoachServiceServer interface {
	mustEmbedUnimplementedSubscriptionCoachServiceServer()
}

func RegisterSubscriptionCoachServiceServer(s grpc.ServiceRegistrar, srv SubscriptionCoachServiceServer) {
	// If the following call pancis, it indicates UnimplementedSubscriptionCoachServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SubscriptionCoachService_ServiceDesc, srv)
}

func _SubscriptionCoachService_CreateSubscriptionCoach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubscriptionCoachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionCoachServiceServer).CreateSubscriptionCoach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionCoachService_CreateSubscriptionCoach_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionCoachServiceServer).CreateSubscriptionCoach(ctx, req.(*CreateSubscriptionCoachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionCoachService_GetSubscriptionCoach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionCoachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionCoachServiceServer).GetSubscriptionCoach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionCoachService_GetSubscriptionCoach_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionCoachServiceServer).GetSubscriptionCoach(ctx, req.(*GetSubscriptionCoachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionCoachService_UpdateSubscriptionCoach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubscriptionCoachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionCoachServiceServer).UpdateSubscriptionCoach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionCoachService_UpdateSubscriptionCoach_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionCoachServiceServer).UpdateSubscriptionCoach(ctx, req.(*UpdateSubscriptionCoachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionCoachService_DeleteSubscriptionCoach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubscriptionCoachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionCoachServiceServer).DeleteSubscriptionCoach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionCoachService_DeleteSubscriptionCoach_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionCoachServiceServer).DeleteSubscriptionCoach(ctx, req.(*DeleteSubscriptionCoachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionCoachService_ListSubscriptionCoach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscriptionCoachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionCoachServiceServer).ListSubscriptionCoach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionCoachService_ListSubscriptionCoach_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionCoachServiceServer).ListSubscriptionCoach(ctx, req.(*ListSubscriptionCoachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriptionCoachService_ServiceDesc is the grpc.ServiceDesc for SubscriptionCoachService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionCoachService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gym.SubscriptionCoachService",
	HandlerType: (*SubscriptionCoachServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubscriptionCoach",
			Handler:    _SubscriptionCoachService_CreateSubscriptionCoach_Handler,
		},
		{
			MethodName: "GetSubscriptionCoach",
			Handler:    _SubscriptionCoachService_GetSubscriptionCoach_Handler,
		},
		{
			MethodName: "UpdateSubscriptionCoach",
			Handler:    _SubscriptionCoachService_UpdateSubscriptionCoach_Handler,
		},
		{
			MethodName: "DeleteSubscriptionCoach",
			Handler:    _SubscriptionCoachService_DeleteSubscriptionCoach_Handler,
		},
		{
			MethodName: "ListSubscriptionCoach",
			Handler:    _SubscriptionCoachService_ListSubscriptionCoach_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/subscribtion.proto",
}
